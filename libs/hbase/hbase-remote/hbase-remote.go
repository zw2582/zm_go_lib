// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "github.com/zw2582/zm_go_lib/libs/hbase"
        //"weather_kid/libs/thrift"
  "github.com/apache/thrift/lib/go/thrift"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void enableTable(Bytes tableName)")
  fmt.Fprintln(os.Stderr, "  void disableTable(Bytes tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableEnabled(Bytes tableName)")
  fmt.Fprintln(os.Stderr, "  void compact(Bytes tableNameOrRegionName)")
  fmt.Fprintln(os.Stderr, "  void majorCompact(Bytes tableNameOrRegionName)")
  fmt.Fprintln(os.Stderr, "   getTableNames()")
  fmt.Fprintln(os.Stderr, "   getColumnDescriptors(Text tableName)")
  fmt.Fprintln(os.Stderr, "   getTableRegions(Text tableName)")
  fmt.Fprintln(os.Stderr, "  void createTable(Text tableName,  columnFamilies)")
  fmt.Fprintln(os.Stderr, "  void deleteTable(Text tableName)")
  fmt.Fprintln(os.Stderr, "   get(Text tableName, Text row, Text column,  attributes)")
  fmt.Fprintln(os.Stderr, "   getVer(Text tableName, Text row, Text column, i32 numVersions,  attributes)")
  fmt.Fprintln(os.Stderr, "   getVerTs(Text tableName, Text row, Text column, i64 timestamp, i32 numVersions,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRow(Text tableName, Text row,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRowWithColumns(Text tableName, Text row,  columns,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRowTs(Text tableName, Text row, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRowWithColumnsTs(Text tableName, Text row,  columns, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRows(Text tableName,  rows,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRowsWithColumns(Text tableName,  rows,  columns,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRowsTs(Text tableName,  rows, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "   getRowsWithColumnsTs(Text tableName,  rows,  columns, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "  void mutateRow(Text tableName, Text row,  mutations,  attributes)")
  fmt.Fprintln(os.Stderr, "  void mutateRowTs(Text tableName, Text row,  mutations, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "  void mutateRows(Text tableName,  rowBatches,  attributes)")
  fmt.Fprintln(os.Stderr, "  void mutateRowsTs(Text tableName,  rowBatches, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "  i64 atomicIncrement(Text tableName, Text row, Text column, i64 value)")
  fmt.Fprintln(os.Stderr, "  void deleteAll(Text tableName, Text row, Text column,  attributes)")
  fmt.Fprintln(os.Stderr, "  void deleteAllTs(Text tableName, Text row, Text column, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "  void deleteAllRow(Text tableName, Text row,  attributes)")
  fmt.Fprintln(os.Stderr, "  void increment(TIncrement increment)")
  fmt.Fprintln(os.Stderr, "  void incrementRows( increments)")
  fmt.Fprintln(os.Stderr, "  void deleteAllRowTs(Text tableName, Text row, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithScan(Text tableName, TScan scan,  attributes)")
  fmt.Fprintln(os.Stderr, "  ScannerID scannerOpen(Text tableName, Text startRow,  columns,  attributes)")
  fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithStop(Text tableName, Text startRow, Text stopRow,  columns,  attributes)")
  fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithPrefix(Text tableName, Text startAndPrefix,  columns,  attributes)")
  fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenTs(Text tableName, Text startRow,  columns, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithStopTs(Text tableName, Text startRow, Text stopRow,  columns, i64 timestamp,  attributes)")
  fmt.Fprintln(os.Stderr, "   scannerGet(ScannerID id)")
  fmt.Fprintln(os.Stderr, "   scannerGetList(ScannerID id, i32 nbRows)")
  fmt.Fprintln(os.Stderr, "  void scannerClose(ScannerID id)")
  fmt.Fprintln(os.Stderr, "   getRowOrBefore(Text tableName, Text row, Text family)")
  fmt.Fprintln(os.Stderr, "  TRegionInfo getRegionInfo(Text row)")
  fmt.Fprintln(os.Stderr, "   append(TAppend append)")
  fmt.Fprintln(os.Stderr, "  bool checkAndPut(Text tableName, Text row, Text column, Text value, Mutation mput,  attributes)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := hbase.NewHbaseClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "enableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Bytes(argvalue0)
    fmt.Print(client.EnableTable(value0))
    fmt.Print("\n")
    break
  case "disableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Bytes(argvalue0)
    fmt.Print(client.DisableTable(value0))
    fmt.Print("\n")
    break
  case "isTableEnabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Bytes(argvalue0)
    fmt.Print(client.IsTableEnabled(value0))
    fmt.Print("\n")
    break
  case "compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Bytes(argvalue0)
    fmt.Print(client.Compact(value0))
    fmt.Print("\n")
    break
  case "majorCompact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MajorCompact requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Bytes(argvalue0)
    fmt.Print(client.MajorCompact(value0))
    fmt.Print("\n")
    break
  case "getTableNames":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetTableNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetTableNames())
    fmt.Print("\n")
    break
  case "getColumnDescriptors":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetColumnDescriptors requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    fmt.Print(client.GetColumnDescriptors(value0))
    fmt.Print("\n")
    break
  case "getTableRegions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableRegions requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    fmt.Print(client.GetTableRegions(value0))
    fmt.Print("\n")
    break
  case "createTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg197 := flag.Arg(2)
    mbTrans198 := thrift.NewTMemoryBufferLen(len(arg197))
    defer mbTrans198.Close()
    _, err199 := mbTrans198.WriteString(arg197)
    if err199 != nil { 
      Usage()
      return
    }
    factory200 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt201 := factory200.GetProtocol(mbTrans198)
    containerStruct1 := hbase.NewHbaseCreateTableArgs()
    err202 := containerStruct1.ReadField2(jsProt201)
    if err202 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ColumnFamilies
    value1 := argvalue1
    fmt.Print(client.CreateTable(value0, value1))
    fmt.Print("\n")
    break
  case "deleteTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    fmt.Print(client.DeleteTable(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Get requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    arg207 := flag.Arg(4)
    mbTrans208 := thrift.NewTMemoryBufferLen(len(arg207))
    defer mbTrans208.Close()
    _, err209 := mbTrans208.WriteString(arg207)
    if err209 != nil { 
      Usage()
      return
    }
    factory210 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt211 := factory210.GetProtocol(mbTrans208)
    containerStruct3 := hbase.NewHbaseGetArgs()
    err212 := containerStruct3.ReadField4(jsProt211)
    if err212 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.Get(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getVer":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetVer requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    tmp3, err216 := (strconv.Atoi(flag.Arg(4)))
    if err216 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg217 := flag.Arg(5)
    mbTrans218 := thrift.NewTMemoryBufferLen(len(arg217))
    defer mbTrans218.Close()
    _, err219 := mbTrans218.WriteString(arg217)
    if err219 != nil { 
      Usage()
      return
    }
    factory220 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt221 := factory220.GetProtocol(mbTrans218)
    containerStruct4 := hbase.NewHbaseGetVerArgs()
    err222 := containerStruct4.ReadField5(jsProt221)
    if err222 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.GetVer(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getVerTs":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetVerTs requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    argvalue3, err226 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err226 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err227 := (strconv.Atoi(flag.Arg(5)))
    if err227 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    arg228 := flag.Arg(6)
    mbTrans229 := thrift.NewTMemoryBufferLen(len(arg228))
    defer mbTrans229.Close()
    _, err230 := mbTrans229.WriteString(arg228)
    if err230 != nil { 
      Usage()
      return
    }
    factory231 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt232 := factory231.GetProtocol(mbTrans229)
    containerStruct5 := hbase.NewHbaseGetVerTsArgs()
    err233 := containerStruct5.ReadField6(jsProt232)
    if err233 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Attributes
    value5 := argvalue5
    fmt.Print(client.GetVerTs(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getRow":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRow requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg236 := flag.Arg(3)
    mbTrans237 := thrift.NewTMemoryBufferLen(len(arg236))
    defer mbTrans237.Close()
    _, err238 := mbTrans237.WriteString(arg236)
    if err238 != nil { 
      Usage()
      return
    }
    factory239 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt240 := factory239.GetProtocol(mbTrans237)
    containerStruct2 := hbase.NewHbaseGetRowArgs()
    err241 := containerStruct2.ReadField3(jsProt240)
    if err241 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Attributes
    value2 := argvalue2
    fmt.Print(client.GetRow(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRowWithColumns":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetRowWithColumns requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg244 := flag.Arg(3)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil { 
      Usage()
      return
    }
    factory247 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    containerStruct2 := hbase.NewHbaseGetRowWithColumnsArgs()
    err249 := containerStruct2.ReadField3(jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    arg250 := flag.Arg(4)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil { 
      Usage()
      return
    }
    factory253 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    containerStruct3 := hbase.NewHbaseGetRowWithColumnsArgs()
    err255 := containerStruct3.ReadField4(jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.GetRowWithColumns(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRowTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetRowTs requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2, err258 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err258 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg259 := flag.Arg(4)
    mbTrans260 := thrift.NewTMemoryBufferLen(len(arg259))
    defer mbTrans260.Close()
    _, err261 := mbTrans260.WriteString(arg259)
    if err261 != nil { 
      Usage()
      return
    }
    factory262 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt263 := factory262.GetProtocol(mbTrans260)
    containerStruct3 := hbase.NewHbaseGetRowTsArgs()
    err264 := containerStruct3.ReadField4(jsProt263)
    if err264 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.GetRowTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRowWithColumnsTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetRowWithColumnsTs requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg267 := flag.Arg(3)
    mbTrans268 := thrift.NewTMemoryBufferLen(len(arg267))
    defer mbTrans268.Close()
    _, err269 := mbTrans268.WriteString(arg267)
    if err269 != nil { 
      Usage()
      return
    }
    factory270 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt271 := factory270.GetProtocol(mbTrans268)
    containerStruct2 := hbase.NewHbaseGetRowWithColumnsTsArgs()
    err272 := containerStruct2.ReadField3(jsProt271)
    if err272 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    argvalue3, err273 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err273 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg274 := flag.Arg(5)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil { 
      Usage()
      return
    }
    factory277 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    containerStruct4 := hbase.NewHbaseGetRowWithColumnsTsArgs()
    err279 := containerStruct4.ReadField5(jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.GetRowWithColumnsTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getRows":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRows requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg281 := flag.Arg(2)
    mbTrans282 := thrift.NewTMemoryBufferLen(len(arg281))
    defer mbTrans282.Close()
    _, err283 := mbTrans282.WriteString(arg281)
    if err283 != nil { 
      Usage()
      return
    }
    factory284 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt285 := factory284.GetProtocol(mbTrans282)
    containerStruct1 := hbase.NewHbaseGetRowsArgs()
    err286 := containerStruct1.ReadField2(jsProt285)
    if err286 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    arg287 := flag.Arg(3)
    mbTrans288 := thrift.NewTMemoryBufferLen(len(arg287))
    defer mbTrans288.Close()
    _, err289 := mbTrans288.WriteString(arg287)
    if err289 != nil { 
      Usage()
      return
    }
    factory290 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt291 := factory290.GetProtocol(mbTrans288)
    containerStruct2 := hbase.NewHbaseGetRowsArgs()
    err292 := containerStruct2.ReadField3(jsProt291)
    if err292 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Attributes
    value2 := argvalue2
    fmt.Print(client.GetRows(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRowsWithColumns":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetRowsWithColumns requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg294 := flag.Arg(2)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil { 
      Usage()
      return
    }
    factory297 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    containerStruct1 := hbase.NewHbaseGetRowsWithColumnsArgs()
    err299 := containerStruct1.ReadField2(jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    arg300 := flag.Arg(3)
    mbTrans301 := thrift.NewTMemoryBufferLen(len(arg300))
    defer mbTrans301.Close()
    _, err302 := mbTrans301.WriteString(arg300)
    if err302 != nil { 
      Usage()
      return
    }
    factory303 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt304 := factory303.GetProtocol(mbTrans301)
    containerStruct2 := hbase.NewHbaseGetRowsWithColumnsArgs()
    err305 := containerStruct2.ReadField3(jsProt304)
    if err305 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    arg306 := flag.Arg(4)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil { 
      Usage()
      return
    }
    factory309 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    containerStruct3 := hbase.NewHbaseGetRowsWithColumnsArgs()
    err311 := containerStruct3.ReadField4(jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.GetRowsWithColumns(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRowsTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetRowsTs requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg313 := flag.Arg(2)
    mbTrans314 := thrift.NewTMemoryBufferLen(len(arg313))
    defer mbTrans314.Close()
    _, err315 := mbTrans314.WriteString(arg313)
    if err315 != nil { 
      Usage()
      return
    }
    factory316 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt317 := factory316.GetProtocol(mbTrans314)
    containerStruct1 := hbase.NewHbaseGetRowsTsArgs()
    err318 := containerStruct1.ReadField2(jsProt317)
    if err318 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    argvalue2, err319 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err319 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg320 := flag.Arg(4)
    mbTrans321 := thrift.NewTMemoryBufferLen(len(arg320))
    defer mbTrans321.Close()
    _, err322 := mbTrans321.WriteString(arg320)
    if err322 != nil { 
      Usage()
      return
    }
    factory323 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt324 := factory323.GetProtocol(mbTrans321)
    containerStruct3 := hbase.NewHbaseGetRowsTsArgs()
    err325 := containerStruct3.ReadField4(jsProt324)
    if err325 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.GetRowsTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRowsWithColumnsTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetRowsWithColumnsTs requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg327 := flag.Arg(2)
    mbTrans328 := thrift.NewTMemoryBufferLen(len(arg327))
    defer mbTrans328.Close()
    _, err329 := mbTrans328.WriteString(arg327)
    if err329 != nil { 
      Usage()
      return
    }
    factory330 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt331 := factory330.GetProtocol(mbTrans328)
    containerStruct1 := hbase.NewHbaseGetRowsWithColumnsTsArgs()
    err332 := containerStruct1.ReadField2(jsProt331)
    if err332 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    arg333 := flag.Arg(3)
    mbTrans334 := thrift.NewTMemoryBufferLen(len(arg333))
    defer mbTrans334.Close()
    _, err335 := mbTrans334.WriteString(arg333)
    if err335 != nil { 
      Usage()
      return
    }
    factory336 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt337 := factory336.GetProtocol(mbTrans334)
    containerStruct2 := hbase.NewHbaseGetRowsWithColumnsTsArgs()
    err338 := containerStruct2.ReadField3(jsProt337)
    if err338 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    argvalue3, err339 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err339 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg340 := flag.Arg(5)
    mbTrans341 := thrift.NewTMemoryBufferLen(len(arg340))
    defer mbTrans341.Close()
    _, err342 := mbTrans341.WriteString(arg340)
    if err342 != nil { 
      Usage()
      return
    }
    factory343 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt344 := factory343.GetProtocol(mbTrans341)
    containerStruct4 := hbase.NewHbaseGetRowsWithColumnsTsArgs()
    err345 := containerStruct4.ReadField5(jsProt344)
    if err345 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.GetRowsWithColumnsTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "mutateRow":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MutateRow requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg348 := flag.Arg(3)
    mbTrans349 := thrift.NewTMemoryBufferLen(len(arg348))
    defer mbTrans349.Close()
    _, err350 := mbTrans349.WriteString(arg348)
    if err350 != nil { 
      Usage()
      return
    }
    factory351 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt352 := factory351.GetProtocol(mbTrans349)
    containerStruct2 := hbase.NewHbaseMutateRowArgs()
    err353 := containerStruct2.ReadField3(jsProt352)
    if err353 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mutations
    value2 := argvalue2
    arg354 := flag.Arg(4)
    mbTrans355 := thrift.NewTMemoryBufferLen(len(arg354))
    defer mbTrans355.Close()
    _, err356 := mbTrans355.WriteString(arg354)
    if err356 != nil { 
      Usage()
      return
    }
    factory357 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt358 := factory357.GetProtocol(mbTrans355)
    containerStruct3 := hbase.NewHbaseMutateRowArgs()
    err359 := containerStruct3.ReadField4(jsProt358)
    if err359 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.MutateRow(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "mutateRowTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "MutateRowTs requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg362 := flag.Arg(3)
    mbTrans363 := thrift.NewTMemoryBufferLen(len(arg362))
    defer mbTrans363.Close()
    _, err364 := mbTrans363.WriteString(arg362)
    if err364 != nil { 
      Usage()
      return
    }
    factory365 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt366 := factory365.GetProtocol(mbTrans363)
    containerStruct2 := hbase.NewHbaseMutateRowTsArgs()
    err367 := containerStruct2.ReadField3(jsProt366)
    if err367 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mutations
    value2 := argvalue2
    argvalue3, err368 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err368 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg369 := flag.Arg(5)
    mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
    defer mbTrans370.Close()
    _, err371 := mbTrans370.WriteString(arg369)
    if err371 != nil { 
      Usage()
      return
    }
    factory372 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt373 := factory372.GetProtocol(mbTrans370)
    containerStruct4 := hbase.NewHbaseMutateRowTsArgs()
    err374 := containerStruct4.ReadField5(jsProt373)
    if err374 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.MutateRowTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "mutateRows":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MutateRows requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg376 := flag.Arg(2)
    mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
    defer mbTrans377.Close()
    _, err378 := mbTrans377.WriteString(arg376)
    if err378 != nil { 
      Usage()
      return
    }
    factory379 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt380 := factory379.GetProtocol(mbTrans377)
    containerStruct1 := hbase.NewHbaseMutateRowsArgs()
    err381 := containerStruct1.ReadField2(jsProt380)
    if err381 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.RowBatches
    value1 := argvalue1
    arg382 := flag.Arg(3)
    mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil { 
      Usage()
      return
    }
    factory385 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    containerStruct2 := hbase.NewHbaseMutateRowsArgs()
    err387 := containerStruct2.ReadField3(jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Attributes
    value2 := argvalue2
    fmt.Print(client.MutateRows(value0, value1, value2))
    fmt.Print("\n")
    break
  case "mutateRowsTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MutateRowsTs requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg389 := flag.Arg(2)
    mbTrans390 := thrift.NewTMemoryBufferLen(len(arg389))
    defer mbTrans390.Close()
    _, err391 := mbTrans390.WriteString(arg389)
    if err391 != nil { 
      Usage()
      return
    }
    factory392 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt393 := factory392.GetProtocol(mbTrans390)
    containerStruct1 := hbase.NewHbaseMutateRowsTsArgs()
    err394 := containerStruct1.ReadField2(jsProt393)
    if err394 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.RowBatches
    value1 := argvalue1
    argvalue2, err395 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err395 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg396 := flag.Arg(4)
    mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
    defer mbTrans397.Close()
    _, err398 := mbTrans397.WriteString(arg396)
    if err398 != nil { 
      Usage()
      return
    }
    factory399 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt400 := factory399.GetProtocol(mbTrans397)
    containerStruct3 := hbase.NewHbaseMutateRowsTsArgs()
    err401 := containerStruct3.ReadField4(jsProt400)
    if err401 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.MutateRowsTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "atomicIncrement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AtomicIncrement requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    argvalue3, err405 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err405 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AtomicIncrement(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteAll":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeleteAll requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    arg409 := flag.Arg(4)
    mbTrans410 := thrift.NewTMemoryBufferLen(len(arg409))
    defer mbTrans410.Close()
    _, err411 := mbTrans410.WriteString(arg409)
    if err411 != nil { 
      Usage()
      return
    }
    factory412 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt413 := factory412.GetProtocol(mbTrans410)
    containerStruct3 := hbase.NewHbaseDeleteAllArgs()
    err414 := containerStruct3.ReadField4(jsProt413)
    if err414 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.DeleteAll(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteAllTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DeleteAllTs requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    argvalue3, err418 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err418 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg419 := flag.Arg(5)
    mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil { 
      Usage()
      return
    }
    factory422 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    containerStruct4 := hbase.NewHbaseDeleteAllTsArgs()
    err424 := containerStruct4.ReadField5(jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.DeleteAllTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "deleteAllRow":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteAllRow requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg427 := flag.Arg(3)
    mbTrans428 := thrift.NewTMemoryBufferLen(len(arg427))
    defer mbTrans428.Close()
    _, err429 := mbTrans428.WriteString(arg427)
    if err429 != nil { 
      Usage()
      return
    }
    factory430 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt431 := factory430.GetProtocol(mbTrans428)
    containerStruct2 := hbase.NewHbaseDeleteAllRowArgs()
    err432 := containerStruct2.ReadField3(jsProt431)
    if err432 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Attributes
    value2 := argvalue2
    fmt.Print(client.DeleteAllRow(value0, value1, value2))
    fmt.Print("\n")
    break
  case "increment":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Increment requires 1 args")
      flag.Usage()
    }
    arg433 := flag.Arg(1)
    mbTrans434 := thrift.NewTMemoryBufferLen(len(arg433))
    defer mbTrans434.Close()
    _, err435 := mbTrans434.WriteString(arg433)
    if err435 != nil {
      Usage()
      return
    }
    factory436 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt437 := factory436.GetProtocol(mbTrans434)
    argvalue0 := hbase.NewTIncrement()
    err438 := argvalue0.Read(jsProt437)
    if err438 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Increment(value0))
    fmt.Print("\n")
    break
  case "incrementRows":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IncrementRows requires 1 args")
      flag.Usage()
    }
    arg439 := flag.Arg(1)
    mbTrans440 := thrift.NewTMemoryBufferLen(len(arg439))
    defer mbTrans440.Close()
    _, err441 := mbTrans440.WriteString(arg439)
    if err441 != nil { 
      Usage()
      return
    }
    factory442 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt443 := factory442.GetProtocol(mbTrans440)
    containerStruct0 := hbase.NewHbaseIncrementRowsArgs()
    err444 := containerStruct0.ReadField1(jsProt443)
    if err444 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Increments
    value0 := argvalue0
    fmt.Print(client.IncrementRows(value0))
    fmt.Print("\n")
    break
  case "deleteAllRowTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeleteAllRowTs requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2, err447 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err447 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg448 := flag.Arg(4)
    mbTrans449 := thrift.NewTMemoryBufferLen(len(arg448))
    defer mbTrans449.Close()
    _, err450 := mbTrans449.WriteString(arg448)
    if err450 != nil { 
      Usage()
      return
    }
    factory451 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt452 := factory451.GetProtocol(mbTrans449)
    containerStruct3 := hbase.NewHbaseDeleteAllRowTsArgs()
    err453 := containerStruct3.ReadField4(jsProt452)
    if err453 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.DeleteAllRowTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "scannerOpenWithScan":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ScannerOpenWithScan requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    arg455 := flag.Arg(2)
    mbTrans456 := thrift.NewTMemoryBufferLen(len(arg455))
    defer mbTrans456.Close()
    _, err457 := mbTrans456.WriteString(arg455)
    if err457 != nil {
      Usage()
      return
    }
    factory458 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt459 := factory458.GetProtocol(mbTrans456)
    argvalue1 := hbase.NewTScan()
    err460 := argvalue1.Read(jsProt459)
    if err460 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg461 := flag.Arg(3)
    mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
    defer mbTrans462.Close()
    _, err463 := mbTrans462.WriteString(arg461)
    if err463 != nil { 
      Usage()
      return
    }
    factory464 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt465 := factory464.GetProtocol(mbTrans462)
    containerStruct2 := hbase.NewHbaseScannerOpenWithScanArgs()
    err466 := containerStruct2.ReadField3(jsProt465)
    if err466 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Attributes
    value2 := argvalue2
    fmt.Print(client.ScannerOpenWithScan(value0, value1, value2))
    fmt.Print("\n")
    break
  case "scannerOpen":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ScannerOpen requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg469 := flag.Arg(3)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil { 
      Usage()
      return
    }
    factory472 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    containerStruct2 := hbase.NewHbaseScannerOpenArgs()
    err474 := containerStruct2.ReadField3(jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    arg475 := flag.Arg(4)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil { 
      Usage()
      return
    }
    factory478 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    containerStruct3 := hbase.NewHbaseScannerOpenArgs()
    err480 := containerStruct3.ReadField4(jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.ScannerOpen(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "scannerOpenWithStop":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ScannerOpenWithStop requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    arg484 := flag.Arg(4)
    mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
    defer mbTrans485.Close()
    _, err486 := mbTrans485.WriteString(arg484)
    if err486 != nil { 
      Usage()
      return
    }
    factory487 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt488 := factory487.GetProtocol(mbTrans485)
    containerStruct3 := hbase.NewHbaseScannerOpenWithStopArgs()
    err489 := containerStruct3.ReadField4(jsProt488)
    if err489 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Columns
    value3 := argvalue3
    arg490 := flag.Arg(5)
    mbTrans491 := thrift.NewTMemoryBufferLen(len(arg490))
    defer mbTrans491.Close()
    _, err492 := mbTrans491.WriteString(arg490)
    if err492 != nil { 
      Usage()
      return
    }
    factory493 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt494 := factory493.GetProtocol(mbTrans491)
    containerStruct4 := hbase.NewHbaseScannerOpenWithStopArgs()
    err495 := containerStruct4.ReadField5(jsProt494)
    if err495 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.ScannerOpenWithStop(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "scannerOpenWithPrefix":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ScannerOpenWithPrefix requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg498 := flag.Arg(3)
    mbTrans499 := thrift.NewTMemoryBufferLen(len(arg498))
    defer mbTrans499.Close()
    _, err500 := mbTrans499.WriteString(arg498)
    if err500 != nil { 
      Usage()
      return
    }
    factory501 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt502 := factory501.GetProtocol(mbTrans499)
    containerStruct2 := hbase.NewHbaseScannerOpenWithPrefixArgs()
    err503 := containerStruct2.ReadField3(jsProt502)
    if err503 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    arg504 := flag.Arg(4)
    mbTrans505 := thrift.NewTMemoryBufferLen(len(arg504))
    defer mbTrans505.Close()
    _, err506 := mbTrans505.WriteString(arg504)
    if err506 != nil { 
      Usage()
      return
    }
    factory507 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt508 := factory507.GetProtocol(mbTrans505)
    containerStruct3 := hbase.NewHbaseScannerOpenWithPrefixArgs()
    err509 := containerStruct3.ReadField4(jsProt508)
    if err509 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Attributes
    value3 := argvalue3
    fmt.Print(client.ScannerOpenWithPrefix(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "scannerOpenTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ScannerOpenTs requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    arg512 := flag.Arg(3)
    mbTrans513 := thrift.NewTMemoryBufferLen(len(arg512))
    defer mbTrans513.Close()
    _, err514 := mbTrans513.WriteString(arg512)
    if err514 != nil { 
      Usage()
      return
    }
    factory515 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt516 := factory515.GetProtocol(mbTrans513)
    containerStruct2 := hbase.NewHbaseScannerOpenTsArgs()
    err517 := containerStruct2.ReadField3(jsProt516)
    if err517 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    argvalue3, err518 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err518 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    arg519 := flag.Arg(5)
    mbTrans520 := thrift.NewTMemoryBufferLen(len(arg519))
    defer mbTrans520.Close()
    _, err521 := mbTrans520.WriteString(arg519)
    if err521 != nil { 
      Usage()
      return
    }
    factory522 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt523 := factory522.GetProtocol(mbTrans520)
    containerStruct4 := hbase.NewHbaseScannerOpenTsArgs()
    err524 := containerStruct4.ReadField5(jsProt523)
    if err524 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.Attributes
    value4 := argvalue4
    fmt.Print(client.ScannerOpenTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "scannerOpenWithStopTs":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "ScannerOpenWithStopTs requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    arg528 := flag.Arg(4)
    mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
    defer mbTrans529.Close()
    _, err530 := mbTrans529.WriteString(arg528)
    if err530 != nil { 
      Usage()
      return
    }
    factory531 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt532 := factory531.GetProtocol(mbTrans529)
    containerStruct3 := hbase.NewHbaseScannerOpenWithStopTsArgs()
    err533 := containerStruct3.ReadField4(jsProt532)
    if err533 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Columns
    value3 := argvalue3
    argvalue4, err534 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err534 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    arg535 := flag.Arg(6)
    mbTrans536 := thrift.NewTMemoryBufferLen(len(arg535))
    defer mbTrans536.Close()
    _, err537 := mbTrans536.WriteString(arg535)
    if err537 != nil { 
      Usage()
      return
    }
    factory538 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt539 := factory538.GetProtocol(mbTrans536)
    containerStruct5 := hbase.NewHbaseScannerOpenWithStopTsArgs()
    err540 := containerStruct5.ReadField6(jsProt539)
    if err540 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Attributes
    value5 := argvalue5
    fmt.Print(client.ScannerOpenWithStopTs(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "scannerGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScannerGet requires 1 args")
      flag.Usage()
    }
    tmp0, err541 := (strconv.Atoi(flag.Arg(1)))
    if err541 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := hbase.ScannerID(argvalue0)
    fmt.Print(client.ScannerGet(value0))
    fmt.Print("\n")
    break
  case "scannerGetList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ScannerGetList requires 2 args")
      flag.Usage()
    }
    tmp0, err542 := (strconv.Atoi(flag.Arg(1)))
    if err542 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := hbase.ScannerID(argvalue0)
    tmp1, err543 := (strconv.Atoi(flag.Arg(2)))
    if err543 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ScannerGetList(value0, value1))
    fmt.Print("\n")
    break
  case "scannerClose":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScannerClose requires 1 args")
      flag.Usage()
    }
    tmp0, err544 := (strconv.Atoi(flag.Arg(1)))
    if err544 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := hbase.ScannerID(argvalue0)
    fmt.Print(client.ScannerClose(value0))
    fmt.Print("\n")
    break
  case "getRowOrBefore":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRowOrBefore requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    fmt.Print(client.GetRowOrBefore(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRegionInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRegionInfo requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    fmt.Print(client.GetRegionInfo(value0))
    fmt.Print("\n")
    break
  case "append":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Append requires 1 args")
      flag.Usage()
    }
    arg549 := flag.Arg(1)
    mbTrans550 := thrift.NewTMemoryBufferLen(len(arg549))
    defer mbTrans550.Close()
    _, err551 := mbTrans550.WriteString(arg549)
    if err551 != nil {
      Usage()
      return
    }
    factory552 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt553 := factory552.GetProtocol(mbTrans550)
    argvalue0 := hbase.NewTAppend()
    err554 := argvalue0.Read(jsProt553)
    if err554 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Append(value0))
    fmt.Print("\n")
    break
  case "checkAndPut":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := hbase.Text(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := hbase.Text(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := hbase.Text(argvalue2)
    argvalue3 := []byte(flag.Arg(4))
    value3 := hbase.Text(argvalue3)
    arg559 := flag.Arg(5)
    mbTrans560 := thrift.NewTMemoryBufferLen(len(arg559))
    defer mbTrans560.Close()
    _, err561 := mbTrans560.WriteString(arg559)
    if err561 != nil {
      Usage()
      return
    }
    factory562 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt563 := factory562.GetProtocol(mbTrans560)
    argvalue4 := hbase.NewMutation()
    err564 := argvalue4.Read(jsProt563)
    if err564 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    arg565 := flag.Arg(6)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil { 
      Usage()
      return
    }
    factory568 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    containerStruct5 := hbase.NewHbaseCheckAndPutArgs()
    err570 := containerStruct5.ReadField6(jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Attributes
    value5 := argvalue5
    fmt.Print(client.CheckAndPut(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
